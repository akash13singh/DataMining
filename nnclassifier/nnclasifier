import mnist_dataloader as data_loader
import time
import numpy
import math
from scipy import linalg, dot

class  Sample:
    def __init__(self,features,label):

        self.features = features

        # replaced by numpy method. Takes 200% less time.
        #len = 0
        #for i in self.features:
        #    len = len+ math.pow(i,2);
        #self.length = math.sqrt(len)

        self.length= linalg.norm(self.features)
        self.label=-1
        if(isinstance( label, numpy.int64 )):
            #print(type(label))
            self.label = label
        else:
            #print(label)
            for k in range(10):
                if( label[k] == 1):
                    self.label = k


def runNNClassifier():
    (train, validation, test) = data_loader.load_data_wrapper();
    train = [ Sample( t[0], t[1] ) for t in train ]
    test = [ Sample( t[0], t[1] ) for t in test ]

    print( "Training set size: ", len(train))
    print( "Testing set size: ", len(test))

    test_counter =0;
    classify_correct =0;
    classify_wrong = 0;
    start = time.time()
    for i in test[0:1000]:
        test_counter+=1
        nearest_sample = train[0]
        min_distance = cosine_distance_numpy(i,nearest_sample)


        for j in train[1:10000]:
            distance = cosine_distance_numpy(i,j)
            if distance < min_distance:
                min_distance = distance
                nearest_sample = j;
            if min_distance == 0:
                break

        if i.label == nearest_sample.label:
            classify_correct+=1
        else:
            classify_wrong+=1

    end =time.time()
    print("time taken: "+ str(end-start))
    print("total test smaples: "+str(test_counter)+"   classifed Correct: "+str(classify_correct)+"   clasified incorrect: "+str(classify_wrong))

def cosine_distance(v1,v2):
    dot_product = 0
    for i in range(len(v1.features)):
        dot_product += ( v1.features[i]*v2.features[i] )
    similarity = dot_product / ( 1.0*( v1.length * v2.length ) )

    return 1-similarity

def cosine_distance_numpy(v1,v2):
    return 1- numpy.dot(v1.features.flatten(),v2.features.flatten())/v1.length/v2.length



if __name__ == '__main__':
    runNNClassifier()